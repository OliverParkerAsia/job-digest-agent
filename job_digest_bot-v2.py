import os
import smtplib
import requests
import json
from bs4 import BeautifulSoup
from datetime import datetime
from email.mime.text import MIMEText
from openpipe import OpenAI

def log_completion(prompt, completion, log_path="logs.jsonl"):
    entry = {
        "prompt": prompt,
        "completion": completion,
        "timestamp": datetime.now().isoformat()
    }
    with open(log_path, "a", encoding="utf-8") as f:
        f.write(json.dumps(entry, ensure_ascii=False) + "\n")

def search_brave(query):
    url = "https://api.search.brave.com/res/v1/web/search"
    headers = {
        "Accept": "application/json",
        "X-Subscription-Token": os.getenv("BRAVE_API_KEY"),
    }
    params = {
        "q": query,
        "count": 3,
        "search_lang": "en",
        "country": "HK",
    }

    try:
        response = requests.get(url, headers=headers, params=params)
        response.raise_for_status()
        data = response.json()
        results = data.get("web", {}).get("results", [])
        for result in results:
            if "url" in result and result["url"].startswith("http"):
                return result["url"]
    except Exception as e:
        print(f"Brave search failed for '{query}': {e}")
    return "https://www.google.com/search?q=" + requests.utils.quote(query)

def get_job_digest():
    client = OpenAI(
        openpipe={"api_key": os.getenv("OPENPIPE_API_KEY")}
    )

    model_id = os.getenv("MODEL_ID")
    prompt = """You are a job curator specializing in experimental media, digital culture, and XR positions. List 5‚Äì10 relevant job opportunities currently open in Hong Kong.

For each job, return:
- Title
- Institution
- One-line description (optional)

Format each line like this:
[1] Title at Institution ‚Äî Short Description
Return each job on a new line."""

    response = client.chat.completions.create(
        model=model_id,
        messages=[{"role": "user", "content": prompt}]
    )

    completion = response.choices[0].message.content
    log_completion(prompt, completion)
    return completion

def enrich_with_links(job_list_raw):
    lines = job_list_raw.strip().split("\n")
    html_list = []

    for line in lines:
        if "]" not in line:
            continue

        try:
            job_text = line.split("]", 1)[1].strip()
            search_query = job_text + " site:.hk"
            url = search_brave(search_query)
            html_list.append(
                f'<li style="margin-bottom: 12px;"><a href="{url or "#"}" style="text-decoration: none; color: #4405dd;">{job_text}</a></li>'
            )
        except Exception:
            html_list.append(f"<li>{job_text} (error)</li>")

    return f"<ul style='padding-left: 20px; margin-top: 0;'>{''.join(html_list)}</ul>"

def enrich_with_links(job_list):
    html = '<ul style="padding-left: 20px;">'

def enrich_with_links(job_list):
    html = '<ul style="padding-left: 20px;">'

    for job in job_list:
        title = job.get("title", "Untitled Position")
        description = job.get("description", "")
        link = job.get("link")

        # If no real link is provided, create a Brave search URL
        if not link:
            query = f"{title} {description} site:.hk"
            link = f"https://search.brave.com/search?q={query.replace(' ', '+')}"

        html += (
            f'<li style="margin-bottom: 12px;">'
            f'<a href="{link}" style="color: #4405dd; text-decoration: none;" target="_blank">{title}</a><br/>'
            f'<span style="font-size: 14px; color: #444;">{description}</span>'
            f'</li>'
        )

    html += "</ul>"
    return html

from datetime import datetime

def get_job_digest_enriched():
    raw = get_job_digest_list()
    html_list = enrich_with_links(raw)

    return f"""
    <html>
        <body style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif; background-color: #f9f9f9; padding: 20px;">
            <div style="max-width: 600px; margin: auto; background-color: #ffffff; padding: 30px; border-radius: 10px; box-shadow: 0 4px 12px rgba(0,0,0,0.08);">
                <h2 style="margin-bottom: 20px; color: #4405dd;">üóûÔ∏è Your Daily Job Digest</h2>
                {html_list}
                <p style="font-size: 12px; color: #777; margin-top: 30px;">
                    This message was generated by your pinkpulse job agent, {datetime.now().strftime('%B %d, %Y')}.
                </p>
            </div>
        </body>
    </html>
    """




def send_email(subject, body, html=False):
    msg = MIMEText(body, "html" if html else "plain")
    msg["Subject"] = subject
    msg["From"] = os.getenv("FROM_EMAIL")
    msg["To"] = os.getenv("TO_EMAIL")

    with smtplib.SMTP_SSL("smtp.gmail.com", 465) as server:
        server.login(os.getenv("FROM_EMAIL"), os.getenv("GMAIL_APP_PASSWORD"))
        server.send_message(msg)

if __name__ == "__main__":
    digest_html = get_job_digest_enriched()
    send_email("üóûÔ∏è Your Daily Job Digest (with links)", digest_html, html=True)
