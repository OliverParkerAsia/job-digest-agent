import os
import smtplib
import time
import requests
from bs4 import BeautifulSoup
from email.mime.text import MIMEText
from openpipe import OpenAI

import os
import requests

import json
from datetime import datetime

def log_completion(prompt, completion, log_path="logs.jsonl"):
    entry = {
        "prompt": prompt,
        "completion": completion,
        "timestamp": datetime.now().isoformat()
    }
    with open(log_path, "a", encoding="utf-8") as f:
        f.write(json.dumps(entry, ensure_ascii=False) + "\n")


def search_brave(query):
    """Uses Brave Search API to get the first result URL for a given query."""
    url = "https://api.search.brave.com/res/v1/web/search"
    headers = {
        "Accept": "application/json",
        "X-Subscription-Token": os.getenv("BRAVE_API_KEY"),
    }
    params = {
        "q": query,
        "count": 1,
        "search_lang": "en",
        "country": "HK",
    }

    try:
        response = requests.get(url, headers=headers, params=params)
        response.raise_for_status()
        data = response.json()
        results = data.get("web", {}).get("results", [])
        if results:
            return results[0]["url"]
    except Exception as e:
        print(f"Brave search failed for '{query}': {e}")
    return None


def get_job_digest():
    client = OpenAI(
        openpipe={"api_key": os.getenv("OPENPIPE_API_KEY")}
    )

    model_id = os.getenv("MODEL_ID")
    prompt = """You are a job curator specializing in experimental media, digital culture, and XR positions. List 5‚Äì10 relevant job opportunities currently open in Hong Kong.

For each job, return:
- Title
- Institution
- One-line description (optional)

Format each line like this:
[1] Title at Institution ‚Äî Short Description
Return each job on a new line."""

    response = client.chat.completions.create(
        model=model_id,
        messages=[{"role": "user", "content": prompt}]
    )

    completion = response.choices[0].message.content
    log_completion(prompt, completion)
    return completion



def enrich_with_links(job_list_raw):
    lines = job_list_raw.strip().split("\n")
    html_list = []

    for line in lines:
        if "]" not in line:
            continue

        try:
            job_text = line.split("]", 1)[1].strip()
            search_query = job_text + " site:.hk"

            url = search_brave(search_query)
            html_list.append(
                f'<li style="margin-bottom: 12px;"><a href="{url or "#"}" style="text-decoration: none; color: #4405dd;">{job_text}</a></li>'
            )

        except Exception as e:
            html_list.append(f"<li>{job_text} (error)</li>")

    return f"<ul style='padding-left: 20px; margin-top: 0;'>{''.join(html_list)}</ul>"


def get_job_digest_enriched():
    raw = get_job_digest()
    html_list = enrich_with_links(raw)

    return f"""
    <html>
        <body style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif; background-color: #f9f9f9; padding: 20px;">
            <div style="max-width: 600px; margin: auto; background-color: #ffffff; padding: 30px; border-radius: 10px; box-shadow: 0 4px 12px rgba(0,0,0,0.08);">
                <h2 style="margin-bottom: 20px; color: #4405dd;">üóûÔ∏è Your Daily Job Digest</h2>
                {html_list}
                <p style="font-size: 12px; color: #777; margin-top: 30px;">This message was generated by your pinkpulse job agent, {time.strftime('%B %d, %Y')}.</p>
            </div>
        </body>
    </html>
    """


def send_email(subject, body, html=False):
    msg = MIMEText(body, "html" if html else "plain")
    msg["Subject"] = subject
    msg["From"] = os.getenv("FROM_EMAIL")
    msg["To"] = os.getenv("TO_EMAIL")

    with smtplib.SMTP_SSL("smtp.gmail.com", 465) as server:
        server.login(os.getenv("FROM_EMAIL"), os.getenv("GMAIL_APP_PASSWORD"))
        server.send_message(msg)

if __name__ == "__main__":
    # Use the enriched version with links:
    digest_html = get_job_digest_enriched()
    send_email("üóûÔ∏è Your Daily Job Digest (with links)", digest_html, html=True)

    # Or fallback to plain version:
    # digest_text = get_job_digest()
    # send_email("üóûÔ∏è Your Daily Job Digest", digest_text)
